// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

RWStructuredBuffer<float4> distances; //distances calculated according to this

Texture2D<float4> map;

SamplerState samplermap
{
	Filter = MIN_POINT_MAG_POINT_MIP_POINT;
	AddressU = Wrap;
	AddressV = Wrap;
};


float2 forward;

float2 position;

float fov;

float mapSize = 512.0;

float2 Pos2UV(float2 pos) {
	return pos / mapSize;
}

//based on this: https://theshoemaker.de/2016/02/ray-casting-in-2d-grids/

float4 Intersect(float2 startPos, float2 forw) {

	float2 currentPos = startPos;
	float2 tile = floor(startPos)+1;
	float2 dTile = lerp(-1, 1, forw>0);
	float2 dt = ((tile + lerp(-1, 0, forw>0)) - startPos) / forw;
	float2 ddt = dTile / forw;
	float t = 0;

	if (length(forw)>0.0) {
		while (t<32.0) {
			if (dt.x < dt.y) {
				tile.x = tile.x + dTile.x;
				float sdt = dt.x;
				t = t + sdt;
				dt.x = dt.x + ddt.x - dt.x;
				dt.y = dt.y - sdt;
			}
			else {
				tile.y = tile.y + dTile.y;
				float sdt = dt.y;
				t = t + sdt;
				dt.x = dt.x - sdt;
				dt.y = dt.y + ddt.y - sdt;
			}
			float4 col = map.SampleLevel(samplermap, Pos2UV(tile), 0);
			if (col.r > 0.1) {
				float2 pos = startPos + forw * t;
				return float4(t, col.gb, (pos.x+pos.y)%1); //distance, colour data, and v for uv
			} //else can we store empty tiles somewhere?
		}
	}

	return float4(512, 0,0,0);
}



[numthreads(512,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	float angle = id.x / 256.0 - 1.0; //angle offset of this strip ranging from -1.0 to 1.0
	float B = -angle*fov; //convert to radians, decide how wide view is?
	float2 newForward = float2(forward.x * cos(B) - forward.y * sin(B) , forward.x * sin(B) + forward.y * cos(B)); //rotate vector by B?

	//map.SampleLevel (samplermap, Pos2UV(position.xy), 0).r; //how to raycast vector across map?
	//map.SampleLevel(samplermap, Pos2UV(position.xy + newForward *100.0), 0).r; //how to raycast vector across map?

	

	float4 samplePos = Intersect(position, newForward);

	//float calcDistance = length(position - samplePos);

	//float4 col = map.SampleLevel(samplermap, Pos2UV(samplePos), 0);

	//todo get v coordinate within pixel

	distances[id.x] = Intersect(position, newForward);
}
